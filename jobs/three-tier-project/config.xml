<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1400.v7fd111b_ec82f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2198.v41dd8ef6dd56"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2198.v41dd8ef6dd56">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3894.3896.vca_2c931e7935">
    <script>pipeline {
  agent any
  
  tools {
    nodejs &apos;node21&apos;
  }

  environment {
    SCANNER_HOME = tool &apos;sonar-scanner&apos;
  }
   
  stages {
    stage(&apos;Git Checkout&apos;) {
      steps {
        git branch: &apos;main&apos;, url: &apos;https://github.com/ranjitrupnawar/3-Tier-Full-Stack.git&apos;
      }
    }

    stage(&apos;Install dependency package&apos;) {
      steps {
        sh &apos;npm install&apos;
      }
    }

    stage(&apos;Trivy FS Scan&apos;) {
      steps {
        sh &apos;trivy fs --format table -o fs-report.html .&apos;
      }
    }

    stage(&apos;SonarQube Analysis&apos;) {
      steps {
        withCredentials([string(credentialsId: &apos;sonar-token&apos;, variable: &apos;SONAR_TOKEN&apos;)]) {
          sh &quot;$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=campground -Dsonar.projectName=campground -Dsonar.login=$SONAR_TOKEN&quot;
        }
      }
    }

    stage(&apos;Docker build and tag&apos;) {
      steps {
        script {
          withDockerRegistry(credentialsId: &apos;docker-cred&apos;, toolName: &apos;docker&apos;) {
            sh &quot;docker build -t ranjitrupnawar/camp:latest .&quot;
          }
        }
      }
    } 

    stage(&apos;Trivy Image scan&apos;) {
      steps {
        sh &apos;trivy image --format table -o image-report.html ranjitrupnawar/camp:latest&apos;
      }
    }

    stage(&apos;Docker push&apos;) {
      steps {
        script {
          withDockerRegistry(credentialsId: &apos;docker-cred&apos;, toolName: &apos;docker&apos;) {
            sh &quot;docker push ranjitrupnawar/camp:latest&quot;
          }
        }
      }
    }

    stage(&apos;Docker deployment&apos;) {
      steps {
        script {
          withDockerRegistry(credentialsId: &apos;docker-cred&apos;, toolName: &apos;docker&apos;) {
            sh &quot;docker run -d -p 3000:3000 ranjitrupnawar/camp:latest&quot;
          }
        }
      }
    }
    
    stage(&apos;EKS deployment&apos;) {
       steps {
           withKubeCredentials(kubectlCredentials: [[caCertificate: &apos;&apos;, clusterName: &apos; my-eks22&apos;, contextName: &apos;&apos;, credentialsId: &apos;k8s-token&apos;, namespace: &apos;webapps&apos;, serverUrl: &apos;https://F1249ED3BA795E7FF9A39EC9E91E8304.gr7.ap-south-1.eks.amazonaws.com&apos;]]) {
           sh &quot;kubectl get apply -f Manifests/dss.yml &quot;
           sh &quot;kubectl get svc -n webapps&quot;
           sh &quot;kubectl get pod -n webapps&quot;
          
           }
           
       }
    }
    

  }

}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>